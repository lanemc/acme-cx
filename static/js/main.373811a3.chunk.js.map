{"version":3,"sources":["config/appConfig.js","services/getWeatherForecast.js","components/ContactRecommendation.js","App.js","reportWebVitals.js","index.js"],"names":["appConfig","apiKey","process","getWeatherForecast","a","fetch","response","json","data","ContactRecommendation","useState","forecast","setForecast","useEffect","currentForecast","console","log","getCurrentForecast","className","city","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAIeA,EAHG,CAChBC,OAAQC,4CCAK,SAAeC,IAA9B,+B,4CAAe,gCAAAC,EAAA,6DACPH,EAASD,EAAUC,OADZ,SAGUI,MAAM,qEAAD,OAAsEJ,EAAtE,oBAHf,cAGPK,EAHO,gBAKMA,EAASC,OALf,cAKPC,EALO,yBAONA,GAPM,4C,iCCoBAC,EAnBe,WAC5B,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAWA,OATAC,qBAAU,WAAM,4CACd,4BAAAT,EAAA,sEACgCD,IADhC,OACQW,EADR,OAEEF,EAAYE,GACZC,QAAQC,IAAIF,GAHd,4CADc,uBAAC,WAAD,wBAMdG,KACA,IAGA,sBAAKC,UAAU,gBAAf,8BACoBP,EAASQ,KAAKC,SCHvBC,EAZH,WACV,OACE,qCACE,sBAAKH,UAAU,SAAf,UACE,oBAAIA,UAAU,YAAd,qBACA,mBAAGA,UAAU,eAAb,SAA4B,qEAE9B,cAAC,EAAD,QCGSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.373811a3.chunk.js","sourcesContent":["// configurations shared between most or all environments can be stored in commonConfig\nconst appConfig = {\n  apiKey: process.env.REACT_APP_OPEN_WEATHER_API_KEY,\n}\nexport default appConfig\n","import appConfig from '../config/appConfig'\n\nexport default async function getWeatherForecast() {\n  const apiKey = appConfig.apiKey\n\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?id=5037649&appid=${apiKey}&units=imperial`)\n\n  const data = await response.json()\n\n  return data\n}","import React, { useEffect, useState } from 'react'\nimport getWeatherForecast from '../services/getWeatherForecast'\n\nconst ContactRecommendation = () => {\n  const [forecast, setForecast] = useState({})\n\n  useEffect(() => {\n    async function getCurrentForecast() {\n      const currentForecast = await getWeatherForecast()\n      setForecast(currentForecast)\n      console.log(currentForecast)\n    }\n    getCurrentForecast()\n  },[])\n\n  return (\n    <div className=\"weather__info\">\n      Weather info for {forecast.city.name}\n    </div>\n  )\n}\n\nexport default ContactRecommendation\n","import ContactRecommendation from './components/ContactRecommendation'\n\nconst App = () => {\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"app-title\">ACME CX</h1>\n        <p className=\"app-subtitle\"><em>Forecasting Better Connections</em></p>\n      </div>\n      <ContactRecommendation />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}