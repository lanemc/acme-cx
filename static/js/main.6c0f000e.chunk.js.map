{"version":3,"sources":["config/appConfig.js","services/getWeatherForecast.js","components/RecommendationTable.js","components/ContactStrategy.js","App.js","reportWebVitals.js","index.js"],"names":["appConfig","apiKey","process","getWeatherForecast","a","fetch","response","json","data","RecommendationTable","forecast","useState","tableData","setTableData","useEffect","useMemo","columns","Header","accessor","tableInstance","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","ContactStrategy","setForecast","currentForecast","weatherByTime","list","time","dateTime","dt_txt","temp","parseInt","main","weather","contactType","getContactType","getFiveDayForecast","temperature","city","name","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c0f000e.chunk.js","sourcesContent":["const appConfig = {\n  apiKey: process.env.REACT_APP_OPEN_WEATHER_API_KEY,\n}\nexport default appConfig\n","import appConfig from '../config/appConfig'\n\nexport default async function getWeatherForecast() {\n  const apiKey = appConfig.apiKey\n\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?id=5037649&appid=${apiKey}&units=imperial`)\n  //const response = await fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=minneapolis,us&units=imperial&APPID=09110e603c1d5c272f94f64305c09436\")\n  const data = await response.json()\n  return data\n}","import React, { useEffect, useMemo, useState } from 'react'\nimport { useTable } from 'react-table'\n\nconst RecommendationTable = ({ forecast }) => {\n  const [tableData, setTableData] = useState()\n\n  useEffect(() => {\n    if(forecast) {\n      setTableData(forecast)\n    }\n  },[forecast])\n\n  const data = useMemo(() => tableData, [tableData])\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Date/Time',\n        accessor: 'dateTime',\n      },\n      {\n        Header: 'Temp',\n        accessor: 'temp',\n      },\n      {\n        Header: 'Weather',\n        accessor: 'weather',\n      },\n      {\n        Header: 'Contact Type',\n        accessor: 'contactType',\n      },\n    ],\n    []\n  )\n  \n  \n  const tableInstance = useTable({ columns, data })\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = tableInstance\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {// Loop over the header rows\n        headerGroups.map(headerGroup => (\n          // Apply the header row props\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {// Loop over the headers in each row\n            headerGroup.headers.map(column => (\n              // Apply the header cell props\n              <th {...column.getHeaderProps()}>\n                {// Render the header\n                column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      {/* Apply the table body props */}\n      <tbody {...getTableBodyProps()}>\n        {// Loop over the table rows\n        rows.map(row => {\n          // Prepare the row for display\n          prepareRow(row)\n          return (\n            // Apply the row props\n            <tr {...row.getRowProps()}>\n              {// Loop over the rows cells\n              row.cells.map(cell => {\n                // Apply the cell props\n                return (\n                  <td {...cell.getCellProps()}>\n                    {// Render the cell contents\n                    cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport default RecommendationTable\n","import React, { useEffect, useState } from 'react'\nimport getWeatherForecast from '../services/getWeatherForecast'\nimport RecommendationTable from './RecommendationTable'\n\nconst ContactStrategy = () => {\n  const [forecast, setForecast] = useState({})\n\n  useEffect(() => {\n    async function getFiveDayForecast() {\n      const currentForecast = await getWeatherForecast()\n      const weatherByTime = currentForecast.list?.map(time => ({\n        dateTime: time?.dt_txt,\n        temp: parseInt(time?.main?.temp),\n        weather: time?.weather[0]?.main,\n        contactType: getContactType(parseInt(time?.main?.temp), time?.weather[0]?.main),\n      }))\n      setForecast(weatherByTime)\n    }\n    getFiveDayForecast()\n  },[])\n\n  const getContactType = (temperature, weather) => {\n    if (temperature > 75 && weather === \"Clear\") {\n      return \"text message\"\n    } else if (temperature > 55 && temperature < 75) {\n      return \"email\"\n    } else if (temperature < 55 && weather === \"Rain\") {\n      return \"phone call\"\n    } else {\n      return \"No recommendation\"\n    }\n  }\n\n  return (\n    <>\n      Forecast for {forecast?.city?.name}\n      {forecast && <RecommendationTable forecast={forecast} />}\n    </>\n  )\n}\n\nexport default ContactStrategy\n","import ContactStrategy from './components/ContactStrategy'\n\nconst App = () => {\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"app-title\">ACME CX</h1>\n        <p className=\"app-subtitle\"><em>Forecasting Better Connections</em></p>\n      </div>\n      <ContactStrategy />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}