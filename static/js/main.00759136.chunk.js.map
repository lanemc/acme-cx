{"version":3,"sources":["config/appConfig.js","services/getWeatherForecast.js","components/RecommendationTable.js","components/ContactStrategy.js","App.js","reportWebVitals.js","index.js"],"names":["appConfig","apiKey","process","getWeatherForecast","a","fetch","response","json","data","RecommendationTable","forecast","hasOwnProperty","map","dateTime","temp","weather","contactType","ContactStrategy","useState","setForecast","useEffect","currentForecast","weatherByTime","list","time","dt_txt","parseInt","main","getContactType","getFiveDayForecast","temperature","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAGeA,EAHG,CAChBC,OAAQC,oCCCK,SAAeC,IAA9B,+B,4CAAe,gCAAAC,EAAA,6DACPH,EAASD,EAAUC,OADZ,SAEUI,MAAM,qEAAD,OAAsEJ,EAAtE,oBAFf,cAEPK,EAFO,gBAGMA,EAASC,OAHf,cAGPC,EAHO,yBAINA,GAJM,4C,iCCoBAC,EApBa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC1B,kCACE,+BACE,2CACA,sCACA,yCACA,iDAEDA,EAASC,eAAe,IAAMD,EAASE,KAAI,SAAAJ,GAAI,OAC9C,+BACE,6BAAKA,EAAKK,WACV,6BAAKL,EAAKM,OACV,6BAAKN,EAAKO,UACV,6BAAKP,EAAKQ,wBC0BHC,EArCS,WACtB,MAAgCC,qBAAhC,mBAAOR,EAAP,KAAiBS,EAAjB,KAEAC,qBAAU,WAAM,4CACd,gCAAAhB,EAAA,sEACgCD,IADhC,OACQkB,EADR,OAEQC,EAFR,UAEwBD,EAAgBE,YAFxC,aAEwB,EAAsBX,KAAI,SAAAY,GAAI,kBAAK,CACvDX,SAAQ,OAAEW,QAAF,IAAEA,OAAF,EAAEA,EAAMC,OAChBX,KAAMY,SAAQ,OAACF,QAAD,IAACA,GAAD,UAACA,EAAMG,YAAP,aAAC,EAAYb,MAC3BC,QAAO,OAAES,QAAF,IAAEA,GAAF,UAAEA,EAAMT,QAAQ,UAAhB,aAAE,EAAkBY,KAC3BX,YAAaY,EAAeF,SAAQ,OAACF,QAAD,IAACA,GAAD,UAACA,EAAMG,YAAP,aAAC,EAAYb,MAAtB,OAA6BU,QAA7B,IAA6BA,GAA7B,UAA6BA,EAAMT,QAAQ,UAA3C,aAA6B,EAAkBY,UAE5ER,EAAYG,GARd,4CADc,uBAAC,WAAD,wBAWdO,KACA,IAEF,IAAMD,EAAiB,SAACE,EAAaf,GACnC,OAAIe,EAAc,IAAkB,UAAZf,EACf,eACEe,EAAc,IAAMA,EAAc,GACpC,QACEA,EAAc,IAAkB,SAAZf,EACtB,aAEA,qBAIX,OACE,qCACE,0DACCL,GAAY,cAAC,EAAD,CAAqBA,SAAUA,QCtBnCqB,EAZH,WACV,OACE,qCACE,sBAAKC,UAAU,SAAf,UACE,oBAAIA,UAAU,YAAd,qBACA,mBAAGA,UAAU,eAAb,SAA4B,qEAE9B,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.00759136.chunk.js","sourcesContent":["const appConfig = {\n  apiKey: process.env.REACT_APP_OPEN_WEATHER_API_KEY,\n}\nexport default appConfig\n","import appConfig from '../config/appConfig'\n\nexport default async function getWeatherForecast() {\n  const apiKey = appConfig.apiKey\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?id=5037649&appid=${apiKey}&units=imperial`)\n  const data = await response.json()\n  return data\n}\n","import React from 'react'\n\nconst RecommendationTable = ({ forecast }) => (\n  <table>\n    <tr>\n      <th>Date/Time</th>\n      <th>Temp</th>\n      <th>Weather</th>\n      <th>Contact Type</th>\n    </tr>\n    {forecast.hasOwnProperty(0) && forecast.map(data =>\n      <tr>\n        <td>{data.dateTime}</td>\n        <td>{data.temp}</td>\n        <td>{data.weather}</td>\n        <td>{data.contactType}</td>\n      </tr>\n    )}\n  </table>\n)\n\n\nexport default RecommendationTable\n","import React, { useEffect, useState } from 'react'\nimport getWeatherForecast from '../services/getWeatherForecast'\nimport RecommendationTable from './RecommendationTable'\n\nconst ContactStrategy = () => {\n  const [forecast, setForecast] = useState()\n\n  useEffect(() => {\n    async function getFiveDayForecast() {\n      const currentForecast = await getWeatherForecast()\n      const weatherByTime = currentForecast.list?.map(time => ({\n        dateTime: time?.dt_txt,\n        temp: parseInt(time?.main?.temp),\n        weather: time?.weather[0]?.main,\n        contactType: getContactType(parseInt(time?.main?.temp), time?.weather[0]?.main),\n      }))\n      setForecast(weatherByTime)\n    }\n    getFiveDayForecast()\n  },[])\n\n  const getContactType = (temperature, weather) => {\n    if (temperature > 75 && weather === \"Clear\") {\n      return \"text message\"\n    } else if (temperature > 55 && temperature < 75) {\n      return \"email\"\n    } else if (temperature < 55 && weather === \"Rain\") {\n      return \"phone call\"\n    } else {\n      return \"No recommendation\"\n    }\n  }\n\n  return (\n    <>\n      <h3>Forecast for Minneapolis</h3>\n      {forecast && <RecommendationTable forecast={forecast} />}\n    </>\n  )\n}\n\nexport default ContactStrategy\n","import ContactStrategy from './components/ContactStrategy'\n\nconst App = () => {\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"app-title\">ACME CX</h1>\n        <p className=\"app-subtitle\"><em>Forecasting Better Connections</em></p>\n      </div>\n      <ContactStrategy />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}